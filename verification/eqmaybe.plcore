(module Prelude (imported) (exported () ()) (local () ())


(define equalsInt
  (lam x (lam y
    (builtin equalsInt x y))))

(define equalsMaybe
  (lam m (lam m'
    (case m
      (cl Prelude.Nothing ()
        (case m'
          (cl Prelude.Nothing () (con Prelude.True))
          (cl Prelude.Just (y) (con Prelude.False))))
      (cl Prelude.Just (x)
        (case m'
          (cl Prelude.Nothing () (con Prelude.False))
          (cl Prelude.Just (y) [Prelude.equalsInt x y])))))))

(define mapMaybe
  (lam f (lam m
    (case m
      (cl Prelude.Nothing () (con Prelude.Nothing))
      (cl Prelude.Just (x) (con Prelude.Just [f x]))))))

(define id
  (lam x (builtin addInt x 1)))

// (define result [Prelude.equalsMaybe [Prelude.mapMaybe Prelude.id (con Prelude.Just 5)] (con Prelude.Just 6)])

(define result [Prelude.mapMaybe Prelude.id (con Prelude.Just 5)])

)